<?php
/**
 * Created by PhpStorm.
 * User: hehanlin
 * Date: 2015/8/8
 * Time: 10:23
 */
/////////////////////////////////////////////////////////////////////////
//array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )

//array_change_key_case() 将 input 数组中的所有键名改为全小写或大写。改变是根据后一个选项 case 参数来进行的。本函数不改变数字索引
//该函数不能操作多维数组
$arr = ['A'=>1,
		'B'=>2,
		'c'=>4,
		['J'=>555]];
$arr = array_change_key_case($arr,CASE_LOWER);//注意：这里必须用一个变量来接受返回值，否则原值是不会变的。
var_dump($arr);
echo "\n//////////////////////////////////////////////////////////////////////\n";



//////////////////////////////////////////////////////////////////////////////
//array array_chunk ( array $input , int $size [, bool $preserve_keys = false ] )

//将一个数组分割成多个数组，其中每个数组的单元数目由 size 决定。最后一个数组的单元数目可能会少于 size 个。
//preserve_keys
//设为 TRUE，可以使 PHP 保留输入数组中原来的键名。如果你指定了 FALSE，那每个结果数组将用从零开始的新数字索引。默认值是 FALSE
//得到的数组是一个多维数组中的单元，其索引从零开始，每一维包含了 size 个元素。 
//仅会对一维起作用
$arr = array_chunk($arr,2,true);
var_dump($arr);
echo "\n//////////////////////////////////////////////////////////////////////\n";

//////////////////////////////////////////////////////////////////////////////  





//array array_column ( array $input , mixed $column_key [, mixed $index_key ] )

//array_column() 返回input数组中键值为column_key的列， 如果指定了可选参数index_key，那么input数组中的这一列的值将作为返回数组中对应值的键。 
$records = array(
    array(
        'id' => 2135,
        'first_name' => 'John',
        'last_name' => 'Doe',
    ),
    array(
        'id' => 3245,
        'first_name' => 'Sally',
        'last_name' => 'Smith',
    ),
    array(
        'id' => 5342,
        'first_name' => 'Jane',
        'last_name' => 'Jones',
    ),
    array(
        'id' => 5623,
        'first_name' => 'Peter',
        'last_name' => 'Doe',
    )
);
//$last_names = array_column($records, 'last_name', 'id');
//print_r($last_names);
echo "\n//////////////////////////////////////////////////////////////////////\n";

///////////////////////////////////////////////////////////////////////////////////////





//////////////////////////////////////////////////////////////////////////
//array array_combine ( array $keys , array $values )

//返回一个 array，用来自 keys 数组的值作为键名，来自 values 数组的值作为相应的值。

$a = array('green', 'red', 'yellow');
$b = array('avocado', 'apple', 'banana');
$c = array_combine($a, $b);
var_dump($c);
echo "\n//////////////////////////////////////////////////////////////////////\n";

///////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////

//array array_count_values ( array $input )

//array_count_values() 返回一个数组，该数组用 input 数组中的值作为键名，该值在 input 数组中出现的次数作为值。 
$array = array(1, "hello", 1, "world", "hello");
print_r(array_count_values($array));
echo "\n//////////////////////////////////////////////////////////////////////\n";

///////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//////////////       end 2015/8/9   10:56		////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


//2015/8/10 15:02


////////////////////////////////////////////////////////////////////////////////////////
///array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )

//array_diff_assoc() 返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意和 array_diff() 不同的是键名也用于比较。 
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result = array_diff_assoc($array1, $array2);
print_r($result);
echo "\n//////////////////////////////////////////////////////////////////////\n";

//例子中可以看到键值对 "a" => "green" 在两个数组中都有，因此不在本函数的输出中。与此不同，键值对 0 => "red" 出现在输出中是因为第二个参数中的 "red" 的键名是 1。 
/////////////////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////
//array array_diff_key ( array $array1 , array $array2 [, array $... ] )

//根据 array1 中的键名和 array2 进行比较，返回不同键名的项。 本函数和 array_diff() 相同只除了比较是根据键名而不是值来进行的。 

$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
//array_diff_key() 返回一个数组，该数组包括了所有出现在 array1 中但是未出现在任何其它参数数组中的键名的值。 
var_dump(array_diff_key($array1, $array2));
echo "\n//////////////////////////////////////////////////////////////////////\n";

//////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////////////////////////////////
//array array_diff ( array $array1 , array $array2 [, array $... ] )

//对比返回在 array1 中但是不在 array2 及任何其它参数数组中的值。 

$array1 = array("a" => "green", "red", "blue", "red");
$array2 = array("b" => "green", "yellow", "red");
$result = array_diff($array1, $array2);

print_r($result);
echo "\n//////////////////////////////////////////////////////////////////////\n";

/////////////////////////////////////////////////////////////////////////////////////////////





/////////////////////////////////////////////////////////////////////////////////////////////
//array array_fill_keys ( array $keys , mixed $value )
//使用 value 参数的值作为值，使用 keys 数组的值作为键来填充一个数组。

$keys = array('foo', 5, 10, 'bar');
$a = array_fill_keys($keys, 'banana');
print_r($a);
echo "\n//////////////////////////////////////////////////////////////////////\n";

/////////////////////////////////////////////////////////////////////////////////////////////







/////////////////////////////////////////////////////////////////////////////////////////////
//array array_fill ( int $start_index , int $num , mixed $value )

//array_fill() 用 value 参数的值将一个数组填充 num 个条目，键名由 start_index 参数指定的开始。
//如果 start_index 是负数， 那么返回的数组的第一个索引将会是 start_index ，而后面索引则从0开始。

$a = array_fill(5, 6, 'banana');
$b = array_fill(-2, 4, 'pear');
print_r($a);
print_r($b);

echo "\n//////////////////////////////////////////////////////////////////////\n";

/////////////////////////////////////////////////////////////////////////////////////////////







/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////end 2015/8/10 16:51////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////








////////////////////////////////////////2015/8/12 22：33/////////////////////////////////////


//array array_flip ( array $trans )

//array_flip() 返回一个反转后的 array，例如 trans 中的键名变成了值，而 trans 中的值成了键名。
//注意 trans 中的值需要能够作为合法的键名，例如需要是 integer 或者 string。如果值的类型不对将发出一个警告，并且有问题的键／值对将不会反转。
//如果同一个值出现了多次，则最后一个键名将作为它的值，所有其它的都丢失了。

$trans = array("a" => 1, "b" => 1, "c" => 2);
$trans = array_flip($trans);
print_r($trans);

echo "\n//////////////////////////////////////////////////////////////////////\n";



////////////////////////////////////////////////////////////////////////////////////////////////////
// array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )

//array_intersect_assoc() 返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意和 array_intersect() 不同的是键名也用于比较。

$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "b" => "yellow", "blue", "red");
$result_array = array_intersect_assoc($array1, $array2);
print_r($result_array);

echo "\n//////////////////////////////////////////////////////////////////////\n";






/////////////////////////////////////////////////////////////////////////////////////////////////

//array array_intersect_key ( array $array1 , array $array2 [, array $ ... ] )

//array_intersect_key() 返回一个数组，该数组包含了所有出现在 array1 中并同时出现在所有其它参数数组中的键名的值。

$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

var_dump(array_intersect_key($array1, $array2));

echo "\n//////////////////////////////////////////////////////////////////////\n";





/////////////////////////////////////////////////////////////////////////////////////////////////////

//array array_intersect ( array $array1 , array $array2 [, array $ ... ] )

//array_intersect() 返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。

$array1 = array("a" => "green", "red", "blue");
$array2 = array("b" => "green", "yellow", "red");
$result = array_intersect($array1, $array2);
print_r($result);

echo "\n//////////////////////////////////////////////////////////////////////\n";





/////////////////////////////////////////////////////////////////////////////////////////////////////

//bool array_key_exists ( mixed $key , array $search )

//array_key_exists() 在给定的 key 存在于数组中时返回 TRUE。key 可以是任何能作为数组索引的值。array_key_exists() 也可用于对象。
//isset() 对于数组中为 NULL 的值不会返回 TRUE，而 array_key_exists() 会。

$search_array = array('first' => null, 'second' => 4);

// returns false
echo isset($search_array['first'])   ?   '1'    :   '0';

// returns true
echo array_key_exists('first', $search_array)   ?   '1' :   '0';

echo "\n//////////////////////////////////////////////////////////////////////\n";
